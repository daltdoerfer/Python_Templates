# https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.learning_curve.html
# Plot:
# Rot -> Trainingsscore (am Besten bei wenig Daten)
# GrÃ¼n -> Cross Validation Score (Cross Validation mit Wenig Daten am schlechteten)

# Imports
import itertools
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import validation_curve
from sklearn.model_selection import learning_curve

# Dataset for Classification
dataset = load_breast_cancer()
x = dataset.data
y = dataset.target

x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=42, test_size=0.3)

print("Samples: ", len(x))


# Berechnet verschiedene Modelle mit unterschiedlicher Anzahl an Datenpunkten
train_sizes, train_scores, test_scores = learning_curve(KNeighborsClassifier(), x_train, y_train, cv=10, n_jobs=-1)

train_scores_mean = np.mean(train_scores, axis=1)
train_scores_std = np.std(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)
test_scores_std = np.std(test_scores, axis=1)

plt.figure()
plt.xlabel("Training examples")
plt.ylabel("Score")
plt.grid()
plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color="r")
plt.fill_between(train_sizes, test_scores_mean - test_scores_std,test_scores_mean + test_scores_std, alpha=0.1, color="g")
plt.plot(train_sizes, train_scores_mean, 'o-', color="r",label="Training score")
plt.plot(train_sizes, test_scores_mean, 'o-', color="g",label="Cross-validation score")

plt.legend(loc="best")
plt.show()